%a{:name =>  "encapsulamiento"}
%h2= "Encapsulamiento"
%p.traducir
  An object consists of a set of operations (which define its behaviour) and a set of attributes (which define its state).
%p.definicion.traducir
  Object-oriented encapsulation is the packaging of an object's attributes within the protective custody of its operations. This way, an object's attributes make up the core of the object. Operations surround and hide the object's nucleus from other objects in the program. This way the state is accessible or modifiable only via the interface provided by its operations.
%p.traducir
  Each operation is a 
  %i  
    %strong
      method 
  that's normally visible to other objects, which means that it can be called upon by other objects.
  Attributes represent the information that an object remembers. Attributes are accessed and updated only via an object's operations. In other words, no other object can access an attribute by directly grabbing the underlying variable(s) that implements the attribute. Another object that need the information held by an attribute can access the information only by appeal to one of the object's operations.
%p.complementario
  El encapsulamiento de software es un concepto casi tan viejo como el software mismo. En la decada de 1940, los programadores notaron que iguales patrones de instrucciones podian aparecer varias veces dentro del mismo programa.
%p.complementario.traducir
  People (such as Maurice Wilkes and his colleagues at Cambridge University) soon realized that such a repeating pattern could be hived away to a corner of the program and invoked by a single name from several different points in the main program.
  Thus was born the subroutine, as this encapsulation of instructions was termed. The subroutine was clearly a good way to save computer memory -a very precious commodity in those days. However, people subsequently realized that the subroutine also saved human memory: it represented a conceptual chunk that a person could (at one level, at least) consider and manipulate as a single idea.
  Encapsulation in object-orientation has a purpose similar to that of a subroutine, althought encapsulation is structurally more sophisticated.
%p.traducir
  In the interest of accuracy, I should point out that many object-oriented languages allow programmers to designate each attribute and method as public (visible to other objects) or private (visible only within the object).
  Encapsulating related variables and methods into a neat software bundle is a simple yet powerful idea that provides two benefits to software developers:
  %ul
    %li
      %p.traducir
        Modularity: The source code for an object can be written and maintained independently of the source code for other objects. Also, an object can be easily passed around in the system. You can give your bicycle to someone else, and it will still work.
    %li
      %p.traducir
        Information-hiding: an object has a public interface that other objects can use to communicate with it. The object can maintain private information and methods that can be changed at any time without affecting other objects that depend on it.
%p.ejemplo.completar.traducir
  For example, the operation location... x, y, attrs... [...] Agregar ejemplo!
