%a{:name =>  "fundamentosHerencia"}
%h2= "Herencia"
%p.traducir
  The term inheritance refers to the fact that one class can inherit part or all of its structure and behaviour from another class. The class that does the inheriting is said to be a
  %strong
    subclass
  of the class from which it inherits. If class B is a subclass of class A, we also say that class A is a
  %strong
    superclass
  of class B. (Sometimes the terms
  %i
    derived
  class and
  %i
    base
  class are used instead of subclass and superclass). A subclass can add to the structure and behaviour that it inherits. It can also replace or modify inherited behaviour (though not inherited structure).
%p.traducir
  Objects can be classified accordingly to a hierarchy. If we take the dogs as example, it's possible to say that every dog has behaviours and characteristics in common, like barking and having four feet. But there are many breeds of dogs, each of them having specific characteristics that don't scape the natural form of the basic characteristics as dogs.
%p.traducir
  This same concept can be applied to object-oriented programming through inheritance. With it, classes can be defined as basic characteristics and behaviours that can be inherited and specialized by other classes. A child class (a class that inherits from another) will have the same functionalities and attributes of the class being inherited, but can also have more characteristics and behaviours that are specific.
%p.traducir.complementario
  With this mechanism it's possible to increase considerably the code's reusability and also maintain a high level of understandability and abstraction that favor productivity. Child classes come with a basic structure implemented and ready for use, worrying only with complementary characteristics, specific to its funcitionality and reason, also being able to override part of the functionalities.
